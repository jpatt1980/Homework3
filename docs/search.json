[
  {
    "objectID": "Homework3.html",
    "href": "Homework3.html",
    "title": "Reading and Manipulating Data",
    "section": "",
    "text": "library(tidyverse)\n\nWarning: package 'tidyverse' was built under R version 4.3.3\n\n\nWarning: package 'ggplot2' was built under R version 4.3.3\n\n\nWarning: package 'tidyr' was built under R version 4.3.3\n\n\nWarning: package 'readr' was built under R version 4.3.3\n\n\nWarning: package 'dplyr' was built under R version 4.3.3\n\n\nWarning: package 'forcats' was built under R version 4.3.3\n\n\nWarning: package 'lubridate' was built under R version 4.3.3\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(readr)\nlibrary(readxl)\n\nWarning: package 'readxl' was built under R version 4.3.3\n\nlibrary(dplyr)"
  },
  {
    "objectID": "Homework3.html#task-1-conceptual-questions",
    "href": "Homework3.html#task-1-conceptual-questions",
    "title": "Reading and Manipulating Data",
    "section": "Task 1: Conceptual Questions",
    "text": "Task 1: Conceptual Questions\n\n1. If your working directory is myfolder/homework/, what relative path would you specify to get the file located at myfolder/MyData.csv?\n\nA: myfolder/MyData.csv\n\n\n\n2. What are the major benefits of using R projects?\n\nA:\n\n\n\n3. What is git and what is github?\n\nA: git is a software package that allows the users to implement version control of coding changes while github is an online location (hub) where multiple people can collaborate on developing code using projects and branches and the git verison control software.\n\n\n\n4. What are the two main differences between a tibble and a data.frame?\n\nA: A tibble is a data frame that is described as “lazy” becasue it provides more warnings and requires more explicit coding than a data frame, for it to perform tasks properly. This resutls in cleaner, more explicit coding that ensures a quality analysis.\n\n\n\n5. Rewrite the following nested function call using baseR’s chaining operator:\narrange(filter(select(as_tibble(iris), starts_with(“Petal”), Species), Petal.Length &lt; 1.55), Species)\n#is re-written as as_tibble(iris) |&gt; filter(iris, starts_with(“Petal”), Petal.Length &lt; 1.55 )\n\n\n6. What is meant by long format data and wide format data? Which do we generally prefer for statistical analysis?\n\nA: Long format data is where each row of data has only one observation and each column has only one variable. Wide format data is where each row of data has multiple observations and each column can have multiple variables. We generally prefer long format data for statistical analysis."
  },
  {
    "objectID": "Homework3.html#task-2-reading-delimited-data",
    "href": "Homework3.html#task-2-reading-delimited-data",
    "title": "Reading and Manipulating Data",
    "section": "Task 2: Reading Delimited Data",
    "text": "Task 2: Reading Delimited Data\n\nGlass Data\n\n\nRead this data into R directly from the URL using functions from the tidyverse. Notice that the data doesn’t include column names - add those (in a manner of your choosing). Print out the tibble (just call the object name).\n\n\n\n#read in data from file folder per professor Post instruction. \nglass_data &lt;- read_delim(\n  \"glass.data\",\n  delim = \",\",\n  col_names = c(\"ID\", \"RI\", \"Na\", \"Mg\", \"Al\", \"Si\", \"K\", \"Ca\", \"Ba\", \"Fe\", \"Type\"),\n  show_col_types = FALSE\n  )\nglass_data\n\n# A tibble: 214 × 11\n      ID    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe  Type\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1     1  1.52  13.6  4.49  1.1   71.8  0.06  8.75     0  0        1\n 2     2  1.52  13.9  3.6   1.36  72.7  0.48  7.83     0  0        1\n 3     3  1.52  13.5  3.55  1.54  73.0  0.39  7.78     0  0        1\n 4     4  1.52  13.2  3.69  1.29  72.6  0.57  8.22     0  0        1\n 5     5  1.52  13.3  3.62  1.24  73.1  0.55  8.07     0  0        1\n 6     6  1.52  12.8  3.61  1.62  73.0  0.64  8.07     0  0.26     1\n 7     7  1.52  13.3  3.6   1.14  73.1  0.58  8.17     0  0        1\n 8     8  1.52  13.2  3.61  1.05  73.2  0.57  8.24     0  0        1\n 9     9  1.52  14.0  3.58  1.37  72.1  0.56  8.3      0  0        1\n10    10  1.52  13    3.6   1.36  73.0  0.57  8.4      0  0.11     1\n# ℹ 204 more rows\n\n\n\n\nStart a chain that would overwrite the Type_of_glass variable using mutate(). Create a character string version (that is, replace 1 with “building_windows_float_processed”, 2 with “building_win. . .”, etc.) instead (see the variable descriptions above to give meaningful values). (If you are familiar with factors, feel free to use that instead of a character string variable - otherwise, think if/then/else via ifelse().)\n\n\n\nglass_data &lt;- glass_data |&gt;\n  mutate(Type = \n    ifelse(Type == 1,\n           \"building_windows_float\",\n      ifelse(Type ==2, \n             \"bulidning_windows_non_float\",\n        ifelse(Type == 3,\n               \"vehicle_windows_float\",\n          ifelse(Type == 4,\n                 \"vehicle_windows_non_float\",\n            ifelse(Type == 5,\n                   \"containers\",\n              ifelse(Type == 6,\n                     \"tableware\",\n                ifelse(Type == 7,\n                       \"headlamps\",\n                       \"Error\"))))))))\n\nglass_data\n\n# A tibble: 214 × 11\n      ID    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe Type             \n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;            \n 1     1  1.52  13.6  4.49  1.1   71.8  0.06  8.75     0  0    building_windows…\n 2     2  1.52  13.9  3.6   1.36  72.7  0.48  7.83     0  0    building_windows…\n 3     3  1.52  13.5  3.55  1.54  73.0  0.39  7.78     0  0    building_windows…\n 4     4  1.52  13.2  3.69  1.29  72.6  0.57  8.22     0  0    building_windows…\n 5     5  1.52  13.3  3.62  1.24  73.1  0.55  8.07     0  0    building_windows…\n 6     6  1.52  12.8  3.61  1.62  73.0  0.64  8.07     0  0.26 building_windows…\n 7     7  1.52  13.3  3.6   1.14  73.1  0.58  8.17     0  0    building_windows…\n 8     8  1.52  13.2  3.61  1.05  73.2  0.57  8.24     0  0    building_windows…\n 9     9  1.52  14.0  3.58  1.37  72.1  0.56  8.3      0  0    building_windows…\n10    10  1.52  13    3.6   1.36  73.0  0.57  8.4      0  0.11 building_windows…\n# ℹ 204 more rows\n\n\n\n\nContinue your chain and keep only observations where the Fe variable is less than 0.2 and the Type of Glass is either “tableware” or “headlamp”.\n\n\n\nglass_data |&gt;\n  filter(Fe &lt; 0.2)\n\n# A tibble: 189 × 11\n      ID    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe Type             \n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;            \n 1     1  1.52  13.6  4.49  1.1   71.8  0.06  8.75     0  0    building_windows…\n 2     2  1.52  13.9  3.6   1.36  72.7  0.48  7.83     0  0    building_windows…\n 3     3  1.52  13.5  3.55  1.54  73.0  0.39  7.78     0  0    building_windows…\n 4     4  1.52  13.2  3.69  1.29  72.6  0.57  8.22     0  0    building_windows…\n 5     5  1.52  13.3  3.62  1.24  73.1  0.55  8.07     0  0    building_windows…\n 6     7  1.52  13.3  3.6   1.14  73.1  0.58  8.17     0  0    building_windows…\n 7     8  1.52  13.2  3.61  1.05  73.2  0.57  8.24     0  0    building_windows…\n 8     9  1.52  14.0  3.58  1.37  72.1  0.56  8.3      0  0    building_windows…\n 9    10  1.52  13    3.6   1.36  73.0  0.57  8.4      0  0.11 building_windows…\n10    12  1.52  12.8  3.66  1.27  73.0  0.6   8.56     0  0    building_windows…\n# ℹ 179 more rows\n\n#cannot get filter to work properly\n\nglass_data\n\n# A tibble: 214 × 11\n      ID    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe Type             \n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;            \n 1     1  1.52  13.6  4.49  1.1   71.8  0.06  8.75     0  0    building_windows…\n 2     2  1.52  13.9  3.6   1.36  72.7  0.48  7.83     0  0    building_windows…\n 3     3  1.52  13.5  3.55  1.54  73.0  0.39  7.78     0  0    building_windows…\n 4     4  1.52  13.2  3.69  1.29  72.6  0.57  8.22     0  0    building_windows…\n 5     5  1.52  13.3  3.62  1.24  73.1  0.55  8.07     0  0    building_windows…\n 6     6  1.52  12.8  3.61  1.62  73.0  0.64  8.07     0  0.26 building_windows…\n 7     7  1.52  13.3  3.6   1.14  73.1  0.58  8.17     0  0    building_windows…\n 8     8  1.52  13.2  3.61  1.05  73.2  0.57  8.24     0  0    building_windows…\n 9     9  1.52  14.0  3.58  1.37  72.1  0.56  8.3      0  0    building_windows…\n10    10  1.52  13    3.6   1.36  73.0  0.57  8.4      0  0.11 building_windows…\n# ℹ 204 more rows"
  },
  {
    "objectID": "Homework3.html#yeast-data",
    "href": "Homework3.html#yeast-data",
    "title": "Reading and Manipulating Data",
    "section": "Yeast Data",
    "text": "Yeast Data\n\n1. Read this data into R directly from the URL using functions from the tidyverse. Notice that the data doesn’t include column names - add those (in a manner of your choosing). Print out the tibble (just call the object name).\n\nyeast_data &lt;- read_table(\n  \"yeast.data\",\n  col_names = c(\"seq_name\", \"mcg\", \"gvh\", \"alm\", \"mit\", \"erl\", \"pox\", \"vac\", \"nuc\", \"class\"),\n  show_col_types = FALSE\n  )\n\nyeast_data\n\n# A tibble: 1,484 × 10\n   seq_name     mcg   gvh   alm   mit   erl   pox   vac   nuc class\n   &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;\n 1 ADT1_YEAST  0.58  0.61  0.47  0.13   0.5   0    0.48  0.22 MIT  \n 2 ADT2_YEAST  0.43  0.67  0.48  0.27   0.5   0    0.53  0.22 MIT  \n 3 ADT3_YEAST  0.64  0.62  0.49  0.15   0.5   0    0.53  0.22 MIT  \n 4 AAR2_YEAST  0.58  0.44  0.57  0.13   0.5   0    0.54  0.22 NUC  \n 5 AATM_YEAST  0.42  0.44  0.48  0.54   0.5   0    0.48  0.22 MIT  \n 6 AATC_YEAST  0.51  0.4   0.56  0.17   0.5   0.5  0.49  0.22 CYT  \n 7 ABC1_YEAST  0.5   0.54  0.48  0.65   0.5   0    0.53  0.22 MIT  \n 8 BAF1_YEAST  0.48  0.45  0.59  0.2    0.5   0    0.58  0.34 NUC  \n 9 ABF2_YEAST  0.55  0.5   0.66  0.36   0.5   0    0.49  0.22 MIT  \n10 ABP1_YEAST  0.4   0.39  0.6   0.15   0.5   0    0.58  0.3  CYT  \n# ℹ 1,474 more rows"
  },
  {
    "objectID": "Homework3.html#start-a-chain-that-removes-the-seq_name-and-nuc-columns.",
    "href": "Homework3.html#start-a-chain-that-removes-the-seq_name-and-nuc-columns.",
    "title": "Reading and Manipulating Data",
    "section": "2. Start a chain that removes the seq_name and nuc columns.",
    "text": "2. Start a chain that removes the seq_name and nuc columns.\n\nyeast_data &lt;- yeast_data |&gt; \n  select(mcg:vac, class)\n\nyeast_data\n\n# A tibble: 1,484 × 8\n     mcg   gvh   alm   mit   erl   pox   vac class\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;\n 1  0.58  0.61  0.47  0.13   0.5   0    0.48 MIT  \n 2  0.43  0.67  0.48  0.27   0.5   0    0.53 MIT  \n 3  0.64  0.62  0.49  0.15   0.5   0    0.53 MIT  \n 4  0.58  0.44  0.57  0.13   0.5   0    0.54 NUC  \n 5  0.42  0.44  0.48  0.54   0.5   0    0.48 MIT  \n 6  0.51  0.4   0.56  0.17   0.5   0.5  0.49 CYT  \n 7  0.5   0.54  0.48  0.65   0.5   0    0.53 MIT  \n 8  0.48  0.45  0.59  0.2    0.5   0    0.58 NUC  \n 9  0.55  0.5   0.66  0.36   0.5   0    0.49 MIT  \n10  0.4   0.39  0.6   0.15   0.5   0    0.58 CYT  \n# ℹ 1,474 more rows\n\n\n\n3. Continue your chain to add columns corresponding to the mean and median of each numeric variable (mcg, gvh, alm, mit, erl, pox, and vac) at each class grouping (see the across() function as we did in the dplyr video!).\n\nyeast_data &lt;- yeast_data |&gt; \n  select(mcg:vac, class) |&gt;\n  mutate(across(where(is.numeric), list(mean = mean, sd = sd), .names = \"{.col}_{.fn}\")) |&gt;\n  dplyr::arrange(class) |&gt;\n  group_by(class) \n\n  yeast_data\n\n# A tibble: 1,484 × 22\n# Groups:   class [10]\n     mcg   gvh   alm   mit   erl   pox   vac class mcg_mean mcg_sd gvh_mean\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;\n 1  0.51  0.4   0.56  0.17   0.5   0.5  0.49 CYT      0.500  0.137    0.500\n 2  0.4   0.39  0.6   0.15   0.5   0    0.58 CYT      0.500  0.137    0.500\n 3  0.4   0.42  0.57  0.35   0.5   0    0.53 CYT      0.500  0.137    0.500\n 4  0.46  0.44  0.52  0.11   0.5   0    0.5  CYT      0.500  0.137    0.500\n 5  0.47  0.39  0.5   0.11   0.5   0    0.49 CYT      0.500  0.137    0.500\n 6  0.45  0.4   0.5   0.16   0.5   0    0.5  CYT      0.500  0.137    0.500\n 7  0.43  0.44  0.48  0.22   0.5   0    0.51 CYT      0.500  0.137    0.500\n 8  0.73  0.63  0.42  0.3    0.5   0    0.49 CYT      0.500  0.137    0.500\n 9  0.43  0.53  0.52  0.13   0.5   0    0.55 CYT      0.500  0.137    0.500\n10  0.46  0.53  0.52  0.15   0.5   0    0.58 CYT      0.500  0.137    0.500\n# ℹ 1,474 more rows\n# ℹ 11 more variables: gvh_sd &lt;dbl&gt;, alm_mean &lt;dbl&gt;, alm_sd &lt;dbl&gt;,\n#   mit_mean &lt;dbl&gt;, mit_sd &lt;dbl&gt;, erl_mean &lt;dbl&gt;, erl_sd &lt;dbl&gt;, pox_mean &lt;dbl&gt;,\n#   pox_sd &lt;dbl&gt;, vac_mean &lt;dbl&gt;, vac_sd &lt;dbl&gt;"
  },
  {
    "objectID": "Homework3.html#task-2-combining-excel-and-delimited-data",
    "href": "Homework3.html#task-2-combining-excel-and-delimited-data",
    "title": "Reading and Manipulating Data",
    "section": "Task 2: Combining Excel and Delimited Data",
    "text": "Task 2: Combining Excel and Delimited Data\n\n\nThere is an excel version of the white wine data set available at https://www4.stat.ncsu.edu/~online/datasets/white-wine.xlsx.\n• Download this file\n• Place it in a folder you know (such as your working directory for your project)\n• Import the data from the first sheet using the readxl package\n• Print out the tibble (just call the object name)\n\n\n\nwhite_wine_data &lt;- read_excel(\"white-wine.xlsx\")\nwhite_wine_data\n\n# A tibble: 4,898 × 12\n   `fixed acidity` `volatile acidity` `citric acid` `residual sugar` chlorides\n             &lt;dbl&gt;              &lt;dbl&gt;         &lt;dbl&gt;            &lt;dbl&gt;     &lt;dbl&gt;\n 1               7               0.27          0.36             20.7     0.045\n 2              63               0.3           0.34              1.6     0.049\n 3              81               0.28          0.4               6.9     0.05 \n 4              72               0.23          0.32              8.5     0.058\n 5              72               0.23          0.32              8.5     0.058\n 6              81               0.28          0.4               6.9     0.05 \n 7              62               0.32          0.16              7       0.045\n 8               7               0.27          0.36             20.7     0.045\n 9              63               0.3           0.34              1.6     0.049\n10              81               0.22          0.43              1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 7 more variables: `free sulfur dioxide` &lt;dbl&gt;,\n#   `total sulfur dioxide` &lt;dbl&gt;, density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;,\n#   alcohol &lt;dbl&gt;, quality &lt;dbl&gt;"
  },
  {
    "objectID": "Homework3.html#when-you-print-the-data-set-out-to-the-console-you-may-notice-that-some-of-the-variable-names-are-surrounded-by-backticks.-this-is-because-they-are-non-standard-they-include-a-space-in-them.-we-can-rename-them-in-a-number-of-ways.-well-do-it-by-reading-in-the-variable-names-from-the-2nd-sheet-of-the-same-file.",
    "href": "Homework3.html#when-you-print-the-data-set-out-to-the-console-you-may-notice-that-some-of-the-variable-names-are-surrounded-by-backticks.-this-is-because-they-are-non-standard-they-include-a-space-in-them.-we-can-rename-them-in-a-number-of-ways.-well-do-it-by-reading-in-the-variable-names-from-the-2nd-sheet-of-the-same-file.",
    "title": "Reading and Manipulating Data",
    "section": "2. When you print the data set out to the console, you may notice that some of the variable names are surrounded by backticks. This is because they are non-standard (they include a space in them). We can rename them in a number of ways. We’ll do it by reading in the variable names from the 2nd sheet of the same file.",
    "text": "2. When you print the data set out to the console, you may notice that some of the variable names are surrounded by backticks. This is because they are non-standard (they include a space in them). We can rename them in a number of ways. We’ll do it by reading in the variable names from the 2nd sheet of the same file.\n\n• Read in the data from the 2nd sheet. This should return a data frame with one column containing alternative versions of the variable names. • Grab that column and overwrite the current column names (colnames()) of your white wine tibble\n\n\nwhite_wine_variables &lt;- read_excel(\"white-wine.xlsx\",\n  sheet = excel_sheets(\"white-wine.xlsx\")[2])\n\ncolnames(white_wine_data) &lt;- white_wine_variables$Variables\n\nwhite_wine_data\n\n# A tibble: 4,898 × 12\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1             7             0.27        0.36           20.7     0.045\n 2            63             0.3         0.34            1.6     0.049\n 3            81             0.28        0.4             6.9     0.05 \n 4            72             0.23        0.32            8.5     0.058\n 5            72             0.23        0.32            8.5     0.058\n 6            81             0.28        0.4             6.9     0.05 \n 7            62             0.32        0.16            7       0.045\n 8             7             0.27        0.36           20.7     0.045\n 9            63             0.3         0.34            1.6     0.049\n10            81             0.22        0.43            1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 7 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;"
  },
  {
    "objectID": "Homework3.html#lastly-add-a-column-to-this-data-set-to-indicate-the-wines-are-white.-that-is-add-a-column-that-has-values-of-white-for-every-observation.",
    "href": "Homework3.html#lastly-add-a-column-to-this-data-set-to-indicate-the-wines-are-white.-that-is-add-a-column-that-has-values-of-white-for-every-observation.",
    "title": "Reading and Manipulating Data",
    "section": "3. Lastly, add a column to this data set to indicate the wines are white. That is, add a column that has values of ‘white’ for every observation.",
    "text": "3. Lastly, add a column to this data set to indicate the wines are white. That is, add a column that has values of ‘white’ for every observation.\n\nfor (i in white_wine_data[1]){\n  white_wine_data$color &lt;- c(\"white\")\n}\n\nwhite_wine_data\n\n# A tibble: 4,898 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1             7             0.27        0.36           20.7     0.045\n 2            63             0.3         0.34            1.6     0.049\n 3            81             0.28        0.4             6.9     0.05 \n 4            72             0.23        0.32            8.5     0.058\n 5            72             0.23        0.32            8.5     0.058\n 6            81             0.28        0.4             6.9     0.05 \n 7            62             0.32        0.16            7       0.045\n 8             7             0.27        0.36           20.7     0.045\n 9            63             0.3         0.34            1.6     0.049\n10            81             0.22        0.43            1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   color &lt;chr&gt;"
  },
  {
    "objectID": "Homework3.html#there-is-a-semi-colon-delimited-version-of-the-red-wine-data-set-available-at-httpswww4.stat.ncsu.eduonlinedatasetsred-wine.csv.",
    "href": "Homework3.html#there-is-a-semi-colon-delimited-version-of-the-red-wine-data-set-available-at-httpswww4.stat.ncsu.eduonlinedatasetsred-wine.csv.",
    "title": "Reading and Manipulating Data",
    "section": "4. There is a semi-colon delimited version of the red wine data set available at https://www4.stat.ncsu.edu/~online/datasets/red-wine.csv.",
    "text": "4. There is a semi-colon delimited version of the red wine data set available at https://www4.stat.ncsu.edu/~online/datasets/red-wine.csv.\n\n• Read this in using the readr package. Be careful that the columns are read in as the correct type! • You should replace the variable names as done above • You should append a column denoting the type as “red”\n\n\nred_wine_data &lt;- read_delim(\"red-wine.csv\",\ndelim = \";\", \ncol_names = c(\"fixed_acidity\",\"volatile_acidity\",\"citric_acid\",\"residual_sugar\",\"chlorides\",\"free_sulfur_dioxide\",\"total_sulfur_dioxide\",\"density\",\"pH\",\"sulphates\",\"alcohol\",\"quality\"))\n\nRows: 1600 Columns: 12\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \";\"\nchr (12): fixed_acidity, volatile_acidity, citric_acid, residual_sugar, chlo...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nstr(red_wine_data)\n\nspc_tbl_ [1,600 × 12] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ fixed_acidity       : chr [1:1600] \"fixed acidity\" \"7.4\" \"7.8\" \"7.8\" ...\n $ volatile_acidity    : chr [1:1600] \"volatile acidity\" \"0.7\" \"0.88\" \"0.76\" ...\n $ citric_acid         : chr [1:1600] \"citric acid\" \"0\" \"0\" \"0.04\" ...\n $ residual_sugar      : chr [1:1600] \"residual sugar\" \"1.9\" \"2.6\" \"2.3\" ...\n $ chlorides           : chr [1:1600] \"chlorides\" \"0.076\" \"0.098\" \"0.092\" ...\n $ free_sulfur_dioxide : chr [1:1600] \"free sulfur dioxide\" \"11\" \"25\" \"15\" ...\n $ total_sulfur_dioxide: chr [1:1600] \"total sulfur dioxide\" \"34\" \"67\" \"54\" ...\n $ density             : chr [1:1600] \"density\" \"0.9978\" \"0.9968\" \"0.997\" ...\n $ pH                  : chr [1:1600] \"pH\" \"3.51\" \"3.2\" \"3.26\" ...\n $ sulphates           : chr [1:1600] \"sulphates\" \"0.56\" \"0.68\" \"0.65\" ...\n $ alcohol             : chr [1:1600] \"alcohol\" \"9.4\" \"9.8\" \"9.8\" ...\n $ quality             : chr [1:1600] \"quality\" \"5\" \"5\" \"5\" ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   fixed_acidity = col_character(),\n  ..   volatile_acidity = col_character(),\n  ..   citric_acid = col_character(),\n  ..   residual_sugar = col_character(),\n  ..   chlorides = col_character(),\n  ..   free_sulfur_dioxide = col_character(),\n  ..   total_sulfur_dioxide = col_character(),\n  ..   density = col_character(),\n  ..   pH = col_character(),\n  ..   sulphates = col_character(),\n  ..   alcohol = col_character(),\n  ..   quality = col_character()\n  .. )\n - attr(*, \"problems\")=&lt;externalptr&gt; \n\nred_wine_data\n\n# A tibble: 1,600 × 12\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n   &lt;chr&gt;         &lt;chr&gt;            &lt;chr&gt;       &lt;chr&gt;          &lt;chr&gt;    \n 1 fixed acidity volatile acidity citric acid residual sugar chlorides\n 2 7.4           0.7              0           1.9            0.076    \n 3 7.8           0.88             0           2.6            0.098    \n 4 7.8           0.76             0.04        2.3            0.092    \n 5 11.2          0.28             0.56        1.9            0.075    \n 6 7.4           0.7              0           1.9            0.076    \n 7 7.4           0.66             0           1.8            0.075    \n 8 7.9           0.6              0.06        1.6            0.069    \n 9 7.3           0.65             0           1.2            0.065    \n10 7.8           0.58             0.02        2              0.073    \n# ℹ 1,590 more rows\n# ℹ 7 more variables: free_sulfur_dioxide &lt;chr&gt;, total_sulfur_dioxide &lt;chr&gt;,\n#   density &lt;chr&gt;, pH &lt;chr&gt;, sulphates &lt;chr&gt;, alcohol &lt;chr&gt;, quality &lt;chr&gt;\n\n\n\nCombine these two data sets into one data set. They both have the exact same columns so this is an easy append task! • Use the dplyr::bind_rows() function (see the help) to create one tibble containing all of the wine data.\n\n\nStart a chain onr your new combined data object to filter the data to only look at high-quality wines (quality &gt; 6.5) and wines that have a reasonable alcohol value (alcohol &lt; 132).\n\n\nContinue your chain to now sort the data from highest quality to lowest.\n\n\nContinue your chain to select only the variables that contain acid, the alcohol variable, the type variable, and the quality variable.\n\n\nContinue your chain to add the mean and standard deviation of the alcohol variable to the data set for each setting of the quality variable."
  }
]